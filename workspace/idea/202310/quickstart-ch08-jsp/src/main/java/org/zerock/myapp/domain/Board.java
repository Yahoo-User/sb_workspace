package org.zerock.myapp.domain;

import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.ToString;
import lombok.extern.log4j.Log4j2;


//=================================================
// 1. For Spring Boot 2.7.x
//=================================================
//import javax.persistence.*;

//=================================================
// 2. For Spring Boot 3.1.x
//=================================================
import jakarta.persistence.*;


@Log4j2

@Data
@ToString(exclude = "member")
@EqualsAndHashCode(callSuper = false)

@Entity
@Table(name="t_board")
public final class Board extends BaseJpaAuditEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.SEQUENCE, generator = "board_generator")
    @SequenceGenerator(name = "board_generator", sequenceName = "t_board_seq", initialValue = 1, allocationSize = 1)
    private Long seq;

    @Column(nullable = false)
    private String title;
    @Column(nullable = false)
    private String content;

    /*
     * ===================================
     * `@Temporal` Annotation
     * ===================================
     * This annotation must be specified for persistent fields or properties of type `java.util.Date` and `java.util.Calendar`.
     * It may only be specified for fields or properties of these types.
     *
     * The Temporal annotation may be used in conjunction with the Basic annotation, the `@Id` annotation,
     * or the `@ElementCollection` annotation when the element collection value is of such a temporal type.
     *
     *  Example:
     *
     *    @Temporal(DATE)
     *    protected java.util.Date endDate;
     */
//    @Temporal(TemporalType.TIMESTAMP)
//    @Column(updatable = false)
//    private Date createDate = new Date();

    /*
     * ===================================
     * 1. `@Column` Annotation
     * ===================================
     * Specifies the mapped column for a persistent property or field.
     * If no Column annotation is specified, the default values apply.
     *
     * --------------------------
     * 1-1. `name` property (Optional)
     * --------------------------
     * The name of the column.
     * Defaults to the property or field name.
     *
     * --------------------------
     * 1-2. `insertable` property (Optional)
     * --------------------------
     * Whether the column is included in SQL `INSERT` statements generated by the persistence provider.
     *
     * --------------------------
     * 1-3. `updatable` property (Optional)
     * --------------------------
     * Whether the column is included in SQL `UPDATE` statements generated by the persistence provider.
     *
     */
    @Column
    private Long cnt = 0L;

    /*
     * ===================================
     * `@ManyToOne` Annotation
     * ===================================
     * Specifies a single-valued association to another entity class that has `many-to-one` multiplicity.
     * It is not normally necessary to specify the target entity explicitly
     * since it can usually be inferred from the type of the object being referenced.
     *
     * If the relationship is `bidirectional`, the `non-owning OneToMany` entity side must be used
     * by the `mappedBy` element to specify the relationship field or property of the entity
     * that is the owner of the relationship.
     *
     * The `ManyToOne` annotation may be used within an embeddable class to specify a relationship
     * from the embeddable class to an entity class.
     *
     * If the relationship is `bidirectional`, the `non-owning OneToMany` entity side must use
     * the `mappedBy` element of the `OneToMany` annotation to specify the relationship field or
     * property of the embeddable field or property on the owning side of the relationship.
     *
     * The dot (".") notation syntax must be used in the `mappedBy` element to indicate
     * the relationship attribute within the embedded attribute.
     *
     * The value of each identifier used with the dot notation is
     * the name of the respective embedded field or property.
     *
     *   Example 1:
     *
     *       @ManyToOne(optional=false)
     *       @JoinColumn(name="CUST_ID", nullable=false, updatable=false)
     *       public Customer getCustomer() { return customer; }
     *
     *   Example 2:
     *
     *       @Entity
     *       public class Employee {
     *          @Id int id;
     *          @Embedded JobInfo jobInfo;
     *          ...
     *       } // end class
     *
     *       @Embeddable
     *       public class JobInfo {
     *          String jobDescription;
     *          @ManyToOne ProgramManager pm; // Bidirectional
     *       } // end class
     *
     *       @Entity
     *       public class ProgramManager {
     *          @Id int id;
     *          @OneToMany(mappedBy="jobInfo.pm")
     *          Collection<Employee> manages;
     *       } // end class
     *
     * -----------------------
     * 1. `optional` property (Optional)
     * -----------------------
     *   Whether the association is optional.
     *   If set to false, then a non-null relationship must always exist.
     *
     */
    @ManyToOne

    /*
     * ===================================
     * `@JoinColumn` Annotation
     * ===================================
     * Specifies a column for joining an entity association or element collection.
     *
     * If the `JoinColumn` annotation itself is defaulted,
     * a single join column is assumed and the default values apply.
     *
     *   Example:
     *
     *     @ManyToOne
     *     @JoinColumn(name="ADDR_ID")
     *     public Address getAddress() { return address; }
     *
     *
     *   Example: `unidirectional one-to-many` association using a `foreign key mapping`
     *
     *     // In Customer class
     *     @OneToMany
     *     @JoinColumn(name="CUST_ID") // join column is in table for Order
     *     public Set<Order> getOrders() {return orders;}
     *
     *
     * -----------------------
     * 1. `name` property (Optional)
     * -----------------------
     *  The name of the `foreign key` column.
     *  The table in which it is found depends upon the context.
     *
     *   (1) If the join is for a `OneToOne` or `ManyToOne` mapping using a `foreign key` mapping strategy,
     *       the `foreign key` column is in the table of the `source` entity or `embeddable`.
     *   (2) If the join is for a `unidirectional OneToMany` mapping using a `foreign key` mapping strategy,
     *       the `foreign key` is in the table of the `target` entity.
     *   (3) If the join is for a `ManyToMany mapping` or for a `OneToOne` or `bidirectional ManyToOne/OneToMany`
     *       mapping using a join table, the `foreign key` is in a `join` table.
     *   (4) If the join is for an element collection, the `foreign key` is in a collection table.
     *
     *  Default (only applies if a single join column is used) :
     *
     *  The concatenation of the following:
     *      the name of the referencing relationship property or
     *      field of the referencing entity or embeddable class; "_"; the name of the referenced primary key column.
     *  If there is no such referencing relationship property or field in the entity, or
     *  if the join is for an element collection, the join column name is formed as the concatenation of the following:
     *      the name of the entity; "_"; the name of the referenced primary key column.
     *
     * -----------------------
     * 2. `nullable` property (Optional)
     * -----------------------
     *  Whether the `foreign key` column is nullable.
     *
     * -----------------------
     * 3. `updatable` property (Optional)
     * -----------------------
     *  Whether the column is included in SQL `UPDATE` statements generated by the persistence provider.
     *
     */
    @JoinColumn(name = "id", nullable = false, updatable = false)
    private Member member;


    public void setMember(Member member) {
        log.trace("setMember({}) invoked.", member);

        this.member = member;
        this.member.getBoardList().add(this);
    } // setMember

} // end class
