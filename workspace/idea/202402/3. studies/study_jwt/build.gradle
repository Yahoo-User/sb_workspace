plugins {
	id 'java'

//	====================================================================== //
//	If you want to package runnable `jar` and `war` file, this must be required.
//	====================================================================== //
	id 'war'

//	id 'org.springframework.boot' version '3.1.3'
//	id 'io.spring.dependency-management' version '1.1.3'

	id 'org.springframework.boot' version '2.7.15'
	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
} /* plugins */


group = 'org.zerock'
version = '0.0.1-SNAPSHOT'

java {
	sourceCompatibility = '17'
} /* java */


/**
 * To remove the duplicate declaration, we could also tell Gradle that
 * we want the `compileOnly` configuration to include everything from the `annotationProcessor` configuration:
 *
 * Example)
 *
 * - Previous -
 * dependencies {
 * 	compileOnly 	'org.projectlombok:lombok:1.18.8'
 * 	testCompileOnly 'org.projectlombok:lombok:1.18.8'
 * }
 *
 * - Current -
 * configurations {
 * 	testCompileOnly extendsFrom compileOnly
 * }
 *
 * dependencies {
 * 	compileOnly 'org.projectlombok:lombok:1.18.8'
 * }
 */
configurations {
	compileOnly.extendsFrom annotationProcessor

	testAnnotationProcessor {
		extendsFrom annotationProcessor
	}

	testCompileOnly.extendsFrom compileOnly
} /* configurations */


repositories {
	mavenCentral()
} /* repositories */


dependencies {

//	====================================================================== //
//	1. Essentially Fundamental Dependencies for Web
//	====================================================================== //
	implementation 'org.springframework.boot:spring-boot-starter-web'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.security:spring-security-core'

	// * Note: This starter already includes `JUnit Test Framework`.
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 'org.projectlombok:lombok'


//	====================================================================== //
//	2. querydsl for Dynamic Query
//	====================================================================== //
//	groupId:artifactId:version:classifier

	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	implementation 'com.querydsl:querydsl-apt:5.0.0:jakarta'
	implementation 'com.querydsl:querydsl-core'


//	====================================================================== //
//	3. JDBC Drivers for H2, Oracle MySQL & Oracle Database Server
//	====================================================================== //
	runtimeOnly 		'com.h2database:h2'
	runtimeOnly 		'com.mysql:mysql-connector-j'

	runtimeOnly('com.oracle.database.jdbc:ojdbc8-production') {
		exclude group: 'com.oracle.database.ha',	module: 'simplefan'
		exclude group: 'com.oracle.database.ha',	module: 'ons'
		exclude group: 'com.oracle.database.jdbc',	module: 'rsi'
		exclude group: 'com.oracle.database.xml',	module: 'xdb'
		exclude group: 'com.oracle.database.xml',	module: 'xmlparserv2'
	}


//	====================================================================== //
//	4. JWT - JSON Web Token
//	====================================================================== //
	implementation 	'io.jsonwebtoken:jjwt:0.9.1'

	// ------------------------
	// Required in the `jjwt-0.11.5`
	// ------------------------
//	implementation 	'io.jsonwebtoken:jjwt-gson:0.11.5'
//	implementation 	'io.jsonwebtoken:jjwt-impl:0.11.5'

//	implementation 'com.auth0:java-jwt:4.4.0'
//	implementation 'org.springframework.security:spring-security-jwt:1.1.1.RELEASE'

	implementation 'javax.xml.bind:jaxb-api:2.3.1'

} /* dependencies */


test {					// 1st. method - OK : == tasks.named('test')
//tasks.named('test') {		// 2nd. method - OK : == test
	useJUnitPlatform()	// Execute the `useJUnitPlatform()` method.
} /* When executing gradle task ,`test` */


void id(String s) { print(s) }
void exclude(LinkedHashMap<String, String> map) { print(map) }



