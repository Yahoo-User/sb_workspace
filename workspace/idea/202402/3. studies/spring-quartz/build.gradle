plugins {
	id 'java'
	id 'war'

	id 'org.springframework.boot' version '3.1.4'
	id 'io.spring.dependency-management' version '1.1.3'

//	id 'org.springframework.boot' version '2.7.16'
//	id 'io.spring.dependency-management' version '1.0.15.RELEASE'
} // plugins


group = 'org.zerock'
version = '0.0.1-SNAPSHOT'


java {
	sourceCompatibility = '17'
	targetCompatibility = '17'
} // java


configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	testCompileOnly {
		extendsFrom testAnnotationProcessor
	}
} // configurations


repositories {
	mavenCentral()
} // repositories


dependencies {
	// ====================================================================== //
	// 1. Essentially Fundamental Dependencies for Web
	// ====================================================================== //
	implementation 'org.springframework.boot:spring-boot-starter-web'
	providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	implementation 'org.springframework.boot:spring-boot-starter-actuator'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	annotationProcessor 	'org.projectlombok:lombok'
	testAnnotationProcessor 'org.projectlombok:lombok'


	// ====================================================================== //
	// 2. JDBC Drivers for H2, Oracle MySQL & Oracle OCI
	// ====================================================================== //
	runtimeOnly 'com.h2database:h2'
	runtimeOnly 'com.mysql:mysql-connector-j'

	// ---------------------------------------------
	// (* Caution *) Do use this Oracle OCI dependency
	// with `server.tomcat.additional-tld-skip-patterns = *18*, osdt*` property declared in `application.properties`.
	// ---------------------------------------------
	runtimeOnly('com.oracle.database.jdbc:ojdbc8-production') {
		exclude group: 'com.oracle.database.ha', 	module: 'simplefan'
		exclude group: 'com.oracle.database.ha', 	module: 'ons'
		exclude group: 'com.oracle.database.jdbc', 	module: 'rsi'
		exclude group: 'com.oracle.database.xml', 	module: 'xdb'
		exclude group: 'com.oracle.database.xml', 	module: 'xmlparserv2'
	}


	// ====================================================================== //
	// 3. For Quartz Job Scheduler Framework
	// ====================================================================== //

	// ---------------------------------------------------
	// 3-1. To use spring annotations for scheduling.
	// ---------------------------------------------------
	implementation 'org.springframework.boot:spring-boot-starter-quartz'

	// ---------------------------------------------------
	// 3-2. To use directly Quartz for scheduling. (***)
	// ---------------------------------------------------
	// We could not dynamically set the start time of the job, or pass parameters to it
	// when using Spring annotations. To solve these problems, you can `directly` use Quartz. (***)
	// To work with Quartz directly, it is not necessary to define a configuration
	// with the `@EnableScheduling` annotation, and instead of
	// the `org.springframework.boot:spring-boot-starter-quartz` dependency,
	// you can use `org.quartz-scheduler:quartz`.  (***)
	// ---------------------------------------------------
//	implementation 'org.quartz-scheduler:quartz'
} // dependencies


test {
//tasks.named('test') {
	useJUnitPlatform()
} // test


void id(String s) {}
void exclude(LinkedHashMap<String, String> stringStringLinkedHashMap) {}

